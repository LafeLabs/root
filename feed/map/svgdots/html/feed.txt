<script id = "bytecodeScript">/*
0200:0362,0203,0334,0203,0334,0203,0334,0203,0334,0354,
01200:0333,0200,0336,0336,0330,0332,0337,0200,0336,0331,0333,0337,0337,
01201:0304,0313,0333,0200,0336,0336,0330,0330,0332,0332,0332,0335,0336,0337,0337,0342,0330,0335,0350,0335,0336,0336,0342,0335,0335,0342,0335,0304,0337,0331,0331,0333,0337,0337,
0201:0342,0330,
01201:0304,0313,0333,0200,0336,0336,0330,0330,0332,0332,0332,0335,0336,0337,0337,0342,0330,0335,0350,0335,0336,0336,0342,0335,0335,0342,0335,0304,0337,0331,0331,0333,0337,0337,
0202:0304,0313,0350,0335,0336,0336,0342,0333,0342,0333,0342,0333,0342,0333,0334,0304,0337,0337,
01202:0202,0200,
01203:0304,0313,0202,0332,0333,0200,0336,0336,0330,0330,0332,0332,0332,0335,0336,0337,0337,0342,0330,0335,0350,0335,0336,0336,0342,0335,0335,0342,0335,0304,0337,0331,0331,0333,0337,0337,
0203:0344,0330,
0204:0362,0203,0334,0203,0334,0203,0334,0203,0334,0363,
01204:0202,0200,0336,0336,0330,0332,0337,0200,0336,0331,0333,0337,0337,
01205:0202,0200,0336,0336,0330,0332,0332,0332,0330,0205,0331,0331,0332,0337,0337,0333,
0205:0362,0203,0335,0203,0203,0335,0203,0335,0203,0203,0335,0363,0336,0330,0333,0336,0331,0332,0337,0365,0336,0332,0331,0337,0337,
0206:0336,0332,0337,0362,0203,0334,0336,0203,0335,0350,0335,0337,0310,0337,0203,0335,0335,0203,0335,0304,0335,0336,0313,0336,0203,0334,0337,0203,0363,0335,0335,0336,0332,0337,
01206:0202,0200,0336,0332,0206,0333,0337,
0210:0316,0336,0313,0336,0314,0337,0337,0313,
01210:0333,0200,0336,0330,0336,0332,0334,0337,0342,0336,0330,0335,0336,0330,0332,0337,071,0365,0331,0331,061,060,0365,0333,0333,0336,0333,0331,0337,0337,0337,0337,
0211:0316,0336,0336,0336,0313,0337,0337,0337,0337,0337,0337,0337,
0207:0342,0334,0342,0335,0335,0342,0334,0336,0330,0340,0331,0337,0337,0330,0340,0331,0336,
01207:0333,0336,0330,0332,0336,0336,0341,0337,0333,0333,0331,0331,0337,0337,
0210:0335,0340,0341,0330,0340,0341,0334,0334,0306,0335,0330,0340,0341,0334,0334,0342,0330,0334,0334,0342,0330,0334,0334,0342,0314,0336,0330,0335,0330,0334,0334,0337,0341,0342,0330,0341,0334,0334,0342,0330,0341,0334,0334,0342,0330,0336,0331,0331,0341,0330,0341,0335,0334,0334,0330,0341,0334,0330,0341,0334,0330,0341,0334,0330,0341,0334,0300,0332,0332,0332,0330,0330,0300,0332,0332,0332,0332,0305,0311,0336,0330,0335,0350,0334,0335,0333,0335,0351,0337,0342,0341,0330,0335,0335,0342,0341,0330,0335,0335,0342,0341,0330,0335,0335,0342,0341,0330,0335,0335,0342,0341,0330,
0210:0310,0337,0311,0336,0313,
0211:0311,0337,0310,0336,0313,
01210:0333,0200,0336,0336,0330,0332,0337,0200,0311,0337,0310,0336,0200,0337,0311,0336,0313,0336,0330,0332,0336,0335,0331,0337,0342,0334,0333,0333,0336,0333,0337,0331,0331,0337,0337,
01211:0333,0200,0336,0336,0330,0332,0337,0200,0311,0337,0310,0336,0200,0337,0311,0336,0313,0336,0330,0332,0336,0335,0331,0337,0342,0334,0336,0333,0342,0335,0335,0342,0335,0335,0333,0337,0333,0336,0333,0337,0331,0331,0337,0337,
0212:0336,0336,0333,0331,0333,0331,0332,0330,0336,0332,0334,0337,0362,0203,0335,0203,0334,0336,0203,0335,0350,0335,0310,0337,0203,0203,0335,0335,0203,0203,0335,0335,0335,0336,0203,0334,0334,0337,0337,0203,0304,0335,0313,0364,0335,0330,0336,0332,0337,0337,0337,
01212:0336,0330,0333,0337,0212,0336,0336,0333,0331,0337,0200,0336,0333,0331,0337,0337,0200,
0213:0313,0336,0336,0336,0336,0336,0336,0336,0316,0337,0337,0337,0313,
0214:0316,0336,0336,0336,0313,0337,0337,0337,0337,0337,0337,0337,
01213:0333,0200,0336,0330,0332,0336,0331,0332,0336,0330,0332,0332,0337,055,062,045,0211,0211,0211,0365,0210,0210,0210,0336,0337,0331,0336,0331,0337,0337,0337,0333,
01214:0333,0200,0336,0330,0332,0336,0331,0332,0336,0330,0332,0332,0337,053,062,045,0211,0211,0211,0365,0210,0210,0210,0336,0337,0331,0336,0331,0337,0337,0337,0333,
0140:0304,
061:0305,
062:0306,
063:0350,
064:0351,
065:0352,
066:0353,
067:0310,
070:0311,
071:0312,
060:0313,
055:0314,
075:0316,
0161:0362,
0167:0203,
0145:0363,
0162:0364,
0164:0366,
0171:0367,
0165:0364,
0151:0345,
0157:0346,
0160:0347,
0133:0365,
0135:0204,
0134:0201,
0141:0330,
0163:0331,
0144:0332,
0146:0333,
0147:0334,
0150:0335,
0152:0336,
0153:0337,
0172:0340,
0170:0341,
0143:0342,
0166:0343,
0142:0200,
0176:0320,
041:0321,
0100:0322,
043:0323,
044:0324,
045:0325,
0136:0326,
046:0327,
050:0212,
051:0213,
052:0300,
0137:0210,
053:0211,
0127:0220,
0127:0221,
0105:0222,
0122:0223,
0124:0224,
0131:0225,
0125:0226,
0111:0227,
0117:0230,
0120:0231,
0173:0232,
0175:0233,
0174:0234,
0101:0235,
0123:0236,
0104:0237,
0106:0240,
0107:0241,
0110:0242,
0112:0243,
0113:0244,
0114:0245,
073:0246,
0132:0247,
0130:0250,
0103:0251,
0126:0252,
0102:0253,
0116:0254,
0115:0255,
0156:030,
0155:031,
054:032,
056:033,
0154:036,
073:037,
074:0377,
072:0246,
0121:0220,
042:023,
047:021,
077:022,
057:020,
0132:0370,
0130:0371,
0103:0372,
0126:0373,
0102:0374,
0116:0375,
0115:0376,
0162:0360,
0165:0361,
0101:0230,
0123:0231,
0104:0232,
0106:0233,
0107:0234,
0110:0235,
0112:0236,
0113:0237,
0132:0240,
0130:0241,
0103:0242,
0126:0243,
0102:0244,
0116:0245,
0115:0246,
074:0247,
076:0177,
040:035,
0173:0325,
0175:0354,
0174:0364,
0117:0213,
0120:0214,
01300:0333,0200,0336,0330,0332,0340,0350,0335,0336,0330,0342,0331,0331,0331,0342,0330,0330,0335,0335,0331,0331,0342,0330,0330,0330,0342,0331,0334,0334,0334,0351,0331,0331,0333,0333,0337,0337
01301:0333,
01302:0333,
01303:0333,
01304:0333,0200,0336,0330,0332,0341,0342,0335,0342,0335,0342,0335,0342,0350,0335,0351,0336,0336,0330,0330,0341,0331,0331,0335,0330,0330,0341,0331,0331,0335,0330,0330,0341,0331,0331,0335,0330,0330,0341,0331,0331,0350,0334,0351,0337,0337,0330,0335,0335,0333,0337
01305:0333,0200,0336,0330,0332,0305,0342,0335,0342,0335,0342,0335,0342,0335,0342,0335,0341,0350,0335,0351,0336,0330,0336,0336,0341,0337,0337,0331,0335,0330,0336,0336,0341,0337,0337,0331,0335,0330,0336,0336,0341,0337,0337,0331,0335,0330,0336,0336,0341,0337,0337,0331,0335,0330,0336,0336,0341,0337,0337,0331,0350,0335,0304,0337,0331,0333,0337
01306:0333,0200,0336,0330,0332,0306,0342,0335,0342,0335,0342,0335,0342,0335,0342,0335,0341,0350,0335,0351,0336,0330,0336,0336,0341,0337,0337,0331,0335,0330,0336,0336,0341,0337,0337,0331,0335,0330,0336,0336,0341,0337,0337,0331,0335,0330,0336,0336,0341,0337,0337,0331,0335,0330,0336,0336,0341,0337,0337,0331,0350,0335,0335,0335,0337,0342,0334,0336,0330,0336,0336,0341,0337,0337,0331,0304,0335,0337,0331,0333,0337
01307:0333,
01310:0333,0200,0336,0332,0350,0335,0310,0337,0342,0330,0334,0334,0342,0330,0334,0334,0342,0330,0334,0334,0342,0330,0334,0334,0334,0351,0336,0313,0333,0337
01311:0335,0305,0342,0334,0311,0337,0342,0336,0335,0330,0334,0350,0334,0337,0342,0334,0334,0304,0336,0313,0335,0200,0334,0305,0350,0335,0342,0330,0335,0335,0335,0311,0336,0342,0330,0334,0334,0334,0336,0342,0335,0335,0335,0337,0331,0334,0334,0334,0337,0331,0334,0313,0304,0335
01312:0333,0200,0352,0334,0342,0330,0334,0334,0334,0334,0342,0334,0312,0337,0313,0336,0342,0330,0334,0334,0334,0334,0336,0342,0334,0334,0304,0312,0336,0313,0337,0333,0337
01313:0333,0200,0336,0336,0332,0332,0330,0342,0334,0342,0330,0335,0342,0330,0335,0342,0330,0342,0330,0335,0342,0330,0335,0342,0335,0331,0333,0337,0337
01314:0333,0200,0314,0336,0332,0332,0330,0200,0333,0200,0333,0200,0331,0337,0313
01315:0333,0313,0200,0336,0330,0332,0341,0335,0342,0334,0334,0342,0334,0334,0330,0334,0331,0337
01316:0333,0200,0336,0336,0330,0332,0332,0332,0336,0341,0330,0330,0330,0330,0341,0333,0333,0331,0331,0341,0333,0333,0330,0330,0341,0331,0331,0331,0331,0341,0333,0333,0331,0331,0337,0337,0337,
01317:0333,0200,0336,0336,0330,0332,0336,0330,0333,0337,0342,0336,0330,0334,0337,0337,0342,0330,0336,0342,0330,0335,0336,0342,0331,0342,0332,0330,0337,0337,0333,0333,0331,0337
01317:0333,
01315:0333,
01320:0333,0200,0336,0336,0330,0332,0337,0320,0204,0336,0333,0331,0337,0337,
01321:0333,0200,0336,0336,0330,0332,0337,0321,0204,0336,0333,0320,0331,0337,0337,
01322:0333,0200,0336,0336,0330,0332,0337,0322,0204,0320,0336,0333,0331,0337,0337,
01323:0333,0200,0336,0336,0330,0332,0337,0323,0204,0320,0336,0333,0331,0337,0337,
01324:0333,0200,0336,0336,0330,0332,0337,0324,0204,0320,0336,0333,0331,0337,0337,
01325:0333,0200,0336,0336,0330,0332,0337,0325,0204,0320,0336,0333,0331,0337,0337,
01326:0333,0200,0336,0336,0330,0332,0337,0326,0204,0336,0320,0333,0331,0337,0337,
01327:0333,0200,0336,0336,0330,0332,0337,0327,0204,0336,0320,0333,0331,0337,0337,
01330:0333,0200,0336,0332,0330,0337,0212,0336,0331,0333,0337,
01331:0333,0200,0336,0332,0330,0337,0335,0335,0212,0335,0335,0336,0331,0333,0337,
01332:0333,0200,0336,0332,0330,0337,0335,0335,0335,0212,0335,0336,0331,0333,0337,
01333:0333,0200,0336,0332,0330,0337,0335,0212,0335,0335,0335,0336,0331,0333,0337,
01334:0333,0200,0336,0330,0332,0336,0350,0343,0334,0334,0343,0334,0334,0343,0334,0342,0335,0330,0336,0330,0334,0334,0334,0337,0342,0334,0351,0336,0331,0337,0337,0333,0337,
01335:0333,0200,0336,0330,0332,0336,0350,0343,0334,0334,0343,0334,0334,0343,0334,0334,0334,0342,0334,0330,0336,0330,0335,0335,0335,0337,0342,0336,0335,0331,0351,0337,0337,0332,0335,0335,0337,0331,
01336:0333,0200,0336,0330,0334,0336,0330,0337,0342,0336,0331,0335,0337,0331,0337,
01337:0333,0200,0336,0330,0332,0336,0342,0334,0342,0334,0342,0334,0342,0330,0330,0334,0337,0331,0337
01340:0333,0200,0336,0330,0332,0340,0333,0331,0337
01341:0333,0200,0336,0330,0332,0341,0340,0333,0331,0337
01342:0333,0200,0336,0330,0332,0334,0336,0342,0330,0340,0331,0335,0335,0342,0330,0340,0333,0333,0330,0334,0337,0337
01343:0333,0200,0336,0330,0332,0350,0343,0335,0342,0334,0334,0342,0335,0340,0351,0331,0333,0337
01344:0304,0313,0333,0200,0336,0332,0344,0333,0337
01345:0304,0313,0333,0200,0336,0332,0345,0333,0337
01346:0304,0313,0333,0200,0336,0332,0346,0333,0337
01347:0304,0313,0333,0200,0336,0332,0336,0330,0330,0347,0331,0331,0337,0333,0337,
01350:0333,0200,0336,0330,0332,0350,0335,0342,0335,0335,0342,0334,0336,0336,0342,0330,0330,0342,0331,0331,0351,0337,0337,0334,0333,0331,0337
01351:0333,0200,0336,0332,0330,0350,0335,0336,0336,0342,0330,0330,0342,0330,0330,0342,0331,0331,0331,0331,0335,0337,0337,0342,0335,0342,0334,0351,0333,0330,0334,0337
01352:0333,0200,0336,0330,0332,0335,0350,0352,0334,0334,0334,0342,0335,0335,0336,0336,0342,0330,0330,0342,0331,0331,0335,0335,0342,0330,0330,0342,0331,0331,0335,0335,0337,0337,0342,0335,0335,0335,0351,0353,0330,0334,0334,0333,0337
01353:0333,0200,0336,0330,0332,0335,0350,0352,0334,0342,0335,0335,0342,0335,0335,0336,0336,0342,0330,0330,0342,0331,0331,0334,0334,0334,0334,0334,0334,0342,0330,0330,0342,0331,0331,0335,0335,0335,0351,0353,0337,0337,0333,0330,0334,0337
01354:0333,0200,0336,0330,0332,0336,0330,0332,0335,0362,0203,0203,0335,0203,0203,0335,0335,0350,0335,0336,0342,0334,0334,0342,0340,0335,0337,0337,0334,0310,0337,0342,0335,0336,0313,0304,0336,0333,0331,0337,0337,
01360:0333,0200,
01361:0333,0200,0336,0336,0330,0332,0337,0200,0306,0350,0336,0334,0342,0330,0334,0334,0334,0334,0342,0330,0335,0335,0335,0335,0342,0330,0334,0334,0334,0334,0342,0330,0334,0334,0334,0334,0334,0335,0330,0330,0330,0304,0334,0331,0337,0337,
01362:0333,0200,0336,0336,0330,0332,0332,0332,0340,0342,0330,0342,0330,0335,0342,0330,0342,0330,0350,0334,0334,0334,0342,0334,0334,0335,0334,0342,0334,0304,0330,0330,0330,0334,0334,0333,0337,0337,
01364:0304,0313,0333,0200,0336,0332,0330,0336,0330,0332,0335,0342,0330,0342,0330,0335,0342,0330,0342,0330,0334,0350,0334,0342,0334,0334,0342,0340,0335,0304,0331,0333,0337,0337
01363:0304,0313,0333,0200,0336,0332,0330,0336,0330,0332,0335,0342,0330,0342,0330,0335,0342,0330,0342,0330,0334,0350,0334,0342,0334,0334,0342,0340,0335,0304,0331,0333,0337,0337,0332,0202,
01365:0313,0304,0333,0200,0336,0330,0332,0336,0331,0332,0337,0350,0350,0334,0342,0335,0335,0342,0334,0304,0333,0350,0350,0334,0342,0335,0335,0342,0334,0304,0336,0333,0331,0337,0337
01344:0333,0200,0336,0330,0332,0336,0332,0340,0335,0337,0342,0330,0340,0334,0332,0336,0331,0332,0331,0337,0337,0202,
01345:0202,0200,0350,0334,0343,0335,0304,
01346:0202,0200,0350,0334,0332,0335,0335,0343,0333,0335,0304,0334,
01365:0313,0304,0333,0200,0336,0330,0332,0336,0331,0332,0337,0350,0350,0334,0342,0335,0335,0342,0334,0304,0333,0350,0350,0334,0342,0335,0335,0342,0334,0304,0336,0333,0331,0337,0337
01366:0333,0200,0336,0336,0332,0332,0332,0330,0335,0337,0342,0340,0366,0330,0332,0335,0335,0367,0335,0336,0333,0330,0337,0337,0331,
01367:0333,0200,0336,0336,0332,0332,0332,0330,0335,0337,0366,0330,0332,0335,0335,0367,0335,0336,0340,0334,0337,0342,0336,0333,0330,0337,0337,0331,0335,0331,0336,0332,0337,
01360:0333,0200,0336,0336,0332,0332,0332,0330,0335,0337,0342,0340,0366,0330,0332,0335,0335,0367,0335,0336,0333,0330,0337,0337,0331,0332,0202,
01361:0333,0200,0336,0336,0332,0332,0332,0330,0335,0337,0366,0330,0332,0335,0335,0367,0335,0336,0340,0334,0337,0342,0336,0333,0330,0337,0337,0331,0335,0331,0336,0332,0337,0332,0202,
01301:0336,0333,0337,0307,0350,0335,0351,0201,0304,0335,0335,0301,0335,0317,0336,0201,0304,0335,0335,0337,0301,0335,0201,0334,0304,0313,0334,0336,0333,0337,0200,
01307:0333,0336,0330,0332,0307,0342,0335,0342,0335,0342,0335,0342,0335,0342,0335,0342,0335,0342,0335,0341,0304,0331,0333,0337,0200,
01317:0336,0333,0337,0307,0350,0335,0351,0201,0304,0335,0335,0301,0335,0317,0336,0201,0304,0335,0335,0337,0301,0335,0201,0334,0304,0313,0334,0336,0333,0337,0200,0336,0332,0342,0317,0336,0330,0340,0331,0337,0337,0330,0340,0331,0336,0313,0333,0337,
01020:0304,0333,0200,0336,0330,0332,0336,0336,0332,0337,0200,0333,0333,0200,0332,0332,0336,0330,0335,0337,0342,0330,0350,0335,0335,0351,0333,0350,0336,0334,0342,0334,0334,0342,0337,0335,0351,0333,0336,0333,0331,0337,0337,0331,0337,0304,0336,0330,0330,0336,0330,0334,0331,0337,0337,
01021:0304,0333,0200,0336,0330,0332,0336,0336,0332,0337,0200,0333,0333,0200,0332,0332,0336,0330,0335,0337,0342,0330,0350,0335,0335,0335,0336,0342,0335,0335,0342,0337,0335,0351,0333,0336,0333,0331,0337,0337,0331,0337,0304,
01022:0333,0200,0336,0336,0330,0330,0332,0332,0332,0336,0336,0333,0337,0337,0336,0330,0336,0333,0337,0337,0200,0333,0200,0333,0200,0331,0331,0332,0332,0200,0333,0200,0333,0200,0336,0333,0331,0337,0337,0332,0330,0336,0336,0331,0337,0342,0330,0335,0350,0335,0336,0342,0335,0335,0342,0337,0335,0335,0335,0351,0331,0331,0331,0333,0333,0336,0330,0337,0337,0337,
01023:0333,0200,0336,0336,0330,0330,0332,0332,0332,0336,0336,0333,0337,0337,0336,0330,0336,0333,0337,0337,0200,0333,0200,0333,0200,0331,0331,0332,0332,0200,0333,0200,0333,0200,0336,0333,0331,0337,0337,0332,0330,0336,0336,0331,0337,0335,0335,0331,0342,0330,0335,0350,0335,0336,0342,0335,0335,0342,0337,0335,0335,0335,0351,0331,0331,0331,0333,0333,0336,0330,0337,0337,0337,0335,0335,0331,0333,
01024:0333,0200,0336,0336,0330,0332,0337,0200,0336,0336,0330,0332,0337,0200,0336,0336,0330,0332,0337,0200,0333,0333,0333,0331,0331,0331,0336,0331,0333,0337,0337,0337,0337,
01025:0333,0200,0336,0336,0330,0332,0337,0336,0336,0330,0332,0337,0200,0336,0336,0330,0332,0337,0200,0333,0333,0333,0331,0331,0331,0336,0331,0333,0337,0337,0337,0337,
01026:0333,0200,0336,0330,0332,0336,0336,0333,0331,0337,0200,0306,0335,0342,0332,0342,0330,0335,0335,0342,0335,0335,0335,0335,0331,0334,0304,0332,0306,0335,0342,0330,0350,0335,0342,0334,0331,0335,0304,0334,0331,0332,0335,0336,0332,0337,0342,0330,0350,0335,0335,0335,0336,0342,0335,0335,0342,0335,0304,0331,0331,0331,0331,0333,0333,0333,0333,0333,0337,0337,0337,
01027:0333,0200,0336,0330,0332,0336,0336,0333,0331,0337,0332,0200,0306,0335,0342,0332,0342,0330,0335,0335,0342,0335,0335,0335,0335,0331,0334,0304,0332,0306,0335,0342,0330,0350,0335,0342,0334,0331,0335,0304,0334,0331,0333,0333,0330,0335,0342,0330,0350,0335,0335,0335,0336,0342,0335,0335,0342,0335,0304,0331,0331,0331,0331,0331,0333,0337,0337,0337,
01031:0333,0200,0336,0330,0332,0336,0332,0331,0123,0126,0107,0365,0330,0330,0332,0332,0330,0335,0335,0336,0330,0332,0337,0201,0335,0350,0335,0336,0342,0335,0335,0342,0334,0304,0333,0333,0333,0333,0331,0331,0331,0331,0331,0332,0336,0333,0336,0332,0337,0337,0337,0337,0337,
01010:0333,0200,0350,0334,0310,0337,0342,0336,0332,0335,0335,0337,0342,0336,0333,0334,0351,0313,
01030:0333,0200,0336,0330,0332,0336,0334,0362,0203,0335,0350,0335,0310,0337,0203,0335,0335,0203,0335,0335,0335,0336,0203,0364,0304,0335,0313,0337,0333,0331,0337,
01031:0333,0200,0336,0330,0332,0336,0334,0335,0335,0362,0203,0335,0350,0335,0310,0337,0203,0335,0335,0203,0335,0335,0335,0336,0203,0364,0304,0335,0335,0335,0313,0337,0333,0331,0337,
01032:0333,0200,0336,0330,0332,0334,0336,0334,0362,0203,0335,0350,0335,0310,0337,0203,0335,0335,0203,0335,0335,0335,0336,0203,0364,0304,0335,0335,0313,0337,0333,0331,0337,
01033:0333,0200,0336,0330,0332,0335,0336,0334,0362,0203,0335,0350,0335,0310,0337,0203,0335,0335,0203,0335,0335,0335,0336,0203,0364,0304,0313,0337,0333,0331,0337,
01037:0333,0200,0336,0332,0330,0336,0332,0362,0335,0335,0203,0335,0350,0335,0310,0337,0203,0335,0335,0203,0335,0335,0335,0336,0203,0364,0335,0335,0330,0334,0335,0331,0331,0331,0331,0334,0337,0362,0203,0335,0335,0335,0336,0203,0203,0335,0335,0335,0337,0203,0364,0331,0335,0336,0304,0313,0333,0331,0337,0332,0335,0335,0337,0331,
01036:0333,0200,0336,0332,0330,0336,0332,0362,0203,0335,0350,0335,0310,0337,0203,0335,0335,0203,0335,0335,0335,0336,0203,0364,0335,0335,0330,0334,0337,0362,0203,0335,0335,0335,0336,0203,0203,0335,0335,0335,0337,0203,0364,0331,0335,0336,0304,0313,0333,0331,0337,0337,
01034:0333,
01035:0333,
*/</script>
<script id = "topfunctions">


 function string2byteCode(localString){
    var localByteCode = "";
    for(var stringIndex = 0;stringIndex < localString.length;stringIndex++){
        var tempCharCode = localString.charCodeAt(stringIndex);
        if(tempCharCode != 0){
            localByteCode += "0";
            localByteCode += tempCharCode.toString(8);
            localByteCode += ",";
        }
    }
    return localByteCode;
}
        
function byteCode2string(localByteCode){
    var localString = "";
    var stringArray = localByteCode.split(",");
    for(var index = 0;index < stringArray.length;index++){
        var myCharCode = String.fromCharCode(parseInt(stringArray[index],8));
        if(parseInt(stringArray[index],8) >= 040 && parseInt(stringArray[index],8) < 0177 ){
            localString += myCharCode;
        }
        if(parseInt(stringArray[index],8) == 012){//newline
            localString += myCharCode;
        }
        if(parseInt(stringArray[index],8) == 011){//vertical tab
            localString += myCharCode;
        }		
        if(parseInt(stringArray[index],8) >= 0400 && parseInt(stringArray[index],8) <= 0777){
            if(currentTable[parseInt(stringArray[index],8)].length > 0){
                localString += byteCode2string(currentTable[parseInt(stringArray[index],8)]);
            }
        }		
        
    }
    return localString;
}
        
function drawGlyph(localString){
    var tempArray = localString.split(',');
    for(var index = 0;index < tempArray.length;index++){
        doTheThing(parseInt(tempArray[index],8));
    }
}
    
function spellGlyph(localString){
    var tempArray = localString.split(',');
    for(var index = 0;index < tempArray.length;index++){
        ctx.lineWidth = 2;
        // ctx.strokeStyle="black";
        if(x > 0.94*innerWidth){
            y+= 1.1*side;
            x = side;
        }
        doTheThing(parseInt(tempArray[index],8) + 01000);
        if(parseInt(tempArray[index],8) > 01000){
            doTheThing(01060);
            doTheThing(01061);
            var sixtyfours = (parseInt(tempArray[index],8) & 0700) >> 6;
            var eights = (parseInt(tempArray[index],8) & 070) >> 3;
            var ones = parseInt(tempArray[index],8) & 07;
            doTheThing(01060 + sixtyfours);            
            doTheThing(01060 + eights);            
            doTheThing(01060 + ones);            
        }
    }
}
</script>
<script id = "actions">
function doTheThing(localCommand){    
    if(localCommand >= 040 && localCommand <= 0176){
        currentHTML += String.fromCharCode(localCommand);
        currentWord += String.fromCharCode(localCommand);
    }
    if(localCommand >= 0200 && localCommand <= 0277){//shapes 
        if(!(localCommand == 0207 && editMode == false) ){
            drawGlyph(currentTable[localCommand]);    	    
        }
    }
    if(localCommand >= 01000 && localCommand <= 01777){//symbol glyphs
            drawGlyph(currentTable[localCommand]);    	    
    } 
        if(localCommand == 0300){
        x = x0;
        y = y0;
        theta = theta0;
        side = unit;
        thetaStep = Math.PI/2;
        scaleFactor = 2;

        ctx.strokeStyle= styleJSON.color0;
        ctx.lineWidth = styleJSON.line0;    	
        ctx.fillStyle = styleJSON.fill0;
        currentStroke = styleJSON.color0;
        currentFill = styleJSON.fill0;

        currentWord = "";
        currentHTML = "";
        currentStyle = "";
    }
    if(localCommand == 0301){
        thetaStep = 0.5*Math.PI*(1 - (2/7));
    }
    if(localCommand == 0304){
        thetaStep = Math.PI/2;
    }
    if(localCommand == 0305){
        thetaStep = 2*Math.PI/5;
    }
    if(localCommand == 0306){
        thetaStep = Math.PI/3;
    }
    if(localCommand == 0307){
        thetaStep = 2*Math.PI/7;
    }
    if(localCommand == 0310){
        scaleFactor = Math.sqrt(2); 
    }
    if(localCommand == 0311){
        scaleFactor = phi; //"golden" ratio 
    }
    if(localCommand == 0312){
        scaleFactor = Math.sqrt(3); 
    }
    if(localCommand == 0313){
        scaleFactor = 2;  //2x
    }
    if(localCommand == 0314){
        scaleFactor = 3;  //3x
    }
    if(localCommand == 0315){
        scaleFactor = 3.14159;  //pi*
    }
    if(localCommand == 0316){
        scaleFactor = 5;  //5*
    }
    if(localCommand == 0317){
        scaleFactor = 1.1524;
    }
    if(localCommand == 0320){
        ctx.strokeStyle= styleJSON.color0;
        ctx.lineWidth = styleJSON.line0;    	
        ctx.fillStyle = styleJSON.fill0;
        currentStroke = styleJSON.color0;
        currentFill = styleJSON.fill0;
    }
    if(localCommand == 0321){
        ctx.strokeStyle= styleJSON.color1;
        ctx.lineWidth = styleJSON.line1;    	
        ctx.fillStyle = styleJSON.fill1;
        currentStroke = styleJSON.color1;
        currentFill = styleJSON.fill1;
    }
    if(localCommand == 0322){
        ctx.strokeStyle= styleJSON.color2;
        ctx.lineWidth = styleJSON.line2;    	
        ctx.fillStyle = styleJSON.fill2;
        currentStroke = styleJSON.color2;
        currentFill = styleJSON.fill2;
    }
    if(localCommand == 0323){
        ctx.strokeStyle= styleJSON.color3;
        ctx.lineWidth = styleJSON.line3;    	
        ctx.fillStyle = styleJSON.fill3;
        currentStroke = styleJSON.color3;
        currentFill = styleJSON.fill3;
    }
    if(localCommand == 0324){
        ctx.strokeStyle= styleJSON.color4;
        ctx.lineWidth = styleJSON.line4;    	
        ctx.fillStyle = styleJSON.fill4;
        currentStroke = styleJSON.color4;
        currentFill = styleJSON.fill4;
    }
    if(localCommand == 0325){
        ctx.strokeStyle= styleJSON.color5;
        ctx.lineWidth = styleJSON.line5;    	
        ctx.fillStyle = styleJSON.fill5;
        currentStroke = styleJSON.color5;
        currentFill = styleJSON.fill0;
    }
    if(localCommand == 0326){
        ctx.strokeStyle= styleJSON.color6;
        ctx.lineWidth = styleJSON.line6;    	
        ctx.fillStyle = styleJSON.fill6;
        currentStroke = styleJSON.color6;
        currentFill = styleJSON.fill6;
    }
    if(localCommand == 0327){
        ctx.strokeStyle= styleJSON.color7;
        ctx.lineWidth = styleJSON.line7;    	
        ctx.fillStyle = styleJSON.fill7;
        currentStroke = styleJSON.color7;
        currentFill = styleJSON.fill7;
    }
    if(localCommand == 0330){
        x += side*Math.cos(theta);   
        y += side*Math.sin(theta); 
    }
    if(localCommand == 0331){
        x -= side*Math.cos(theta);   
        y -= side*Math.sin(theta); 
    }
    if(localCommand == 0332){
        x += side*Math.cos(theta - thetaStep);
        y += side*Math.sin(theta - thetaStep);
    }
    if(localCommand == 0333){
        x += side*Math.cos(theta + thetaStep);
        y += side*Math.sin(theta + thetaStep);
    }
    if(localCommand == 0334){
        theta -= thetaStep; // CCW
    }
    if(localCommand == 0335){
        theta += thetaStep; // CW
    }
    if(localCommand == 0336){
        side /= scaleFactor; // -
    }
    if(localCommand == 0337){
        side *= scaleFactor; // +
    }
    if(localCommand == 0340){
        //point:
        ctx.beginPath();
        ctx.arc(x, y, ctx.lineWidth, 0, 2 * Math.PI);
        ctx.fill();	
        ctx.closePath();
        currentSVG += "<circle cx=\"";
        currentSVG += Math.round(x).toString();
        currentSVG += "\" cy = \"";
        currentSVG += Math.round(y).toString();
        currentSVG += "\" r = \"" + ctx.lineWidth.toString() + "\" stroke = \"" + currentStroke + "\" stroke-width = \"" + (ctx.lineWidth).toString() + "\" ";
        currentSVG += "fill = \"" + currentStroke + "\" />\n";		
    }
    if(localCommand == 0341){
        //circle:
        ctx.beginPath();
        ctx.arc(x, y, side, 0, 2 * Math.PI);
        ctx.closePath();
        ctx.stroke();
        currentSVG += "    <circle cx=\"";
        currentSVG += Math.round(x).toString();
        currentSVG += "\" cy = \"";
        currentSVG += Math.round(y).toString();
        currentSVG += "\" r = \"" + side.toString() + "\" stroke = \"" + currentStroke + "\" stroke-width = \"" + (ctx.lineWidth).toString() + "\" ";
        currentSVG += "fill = \"none\" />\n";		
    }
    if(localCommand == 0342){
        //line segment:
        ctx.beginPath();
        ctx.moveTo(x,y);
        ctx.lineTo(x + side*Math.cos(theta),y + side*Math.sin(theta));
        ctx.stroke();		
        ctx.closePath();
        var x2 = Math.round(x + side*Math.cos(theta));
        var y2 = Math.round(y + side*Math.sin(theta));
        currentSVG += "    <line x1=\""+Math.round(x).toString()+"\" y1=\""+Math.round(y).toString()+"\" x2=\""+x2.toString()+"\" y2=\""+y2.toString()+"\" style=\"stroke:" + currentStroke + ";stroke-width:" + (ctx.lineWidth).toString() + "\" />\n"
    }
    if(localCommand == 0343){
        // arc:
        ctx.beginPath();
        ctx.arc(x, y, side, theta - thetaStep,theta + thetaStep);
        ctx.stroke();
        ctx.closePath();
        localString = "";
        localString += "  <path d=\"";	
        localString += "M";
        var localInt = x + side*Math.cos(theta - thetaStep);
        localString += localInt.toString();
        localString += " ";
        localInt = y + side*Math.sin(theta - thetaStep);
        localString += localInt.toString();
        currentSVG += localString;
        localString = "           A" + side.toString() + " " + side.toString() + " 0 0 1 ";
        localInt = x + side*Math.cos(theta + thetaStep);
        localString += localInt.toString() + " ";
        localInt = y + side*Math.sin(theta + thetaStep);
        localString += localInt.toString() + "\" fill = \"none\" stroke = \"" + currentStroke + "\" stroke-width = \"" + (ctx.lineWidth).toString() + "\" />\n";
        currentSVG += localString;
    }
    if(localCommand == 0344){
        //line segment as part of path 
        ctx.lineTo(x + side*Math.cos(theta),y + side*Math.sin(theta));
        ctx.stroke();		
        var x2 = Math.round(x + side*Math.cos(theta));
        var y2 = Math.round(y + side*Math.sin(theta));
        currentSVG += "L" + x2 + " " + y2 + " ";
    }
    if(localCommand == 0345){
        //arc as part of path, to the right (CW)
        ctx.arc(x, y, side, theta - thetaStep,theta + thetaStep);
        ctx.stroke();

        localString = "";
        localString += "M";
        var localInt = x + side*Math.cos(theta - thetaStep);
        localString += localInt.toString();
        localString += " ";
        localInt = y + side*Math.sin(theta - thetaStep);
        localString += localInt.toString();
        currentSVG += localString;
        localString = "           A" + side.toString() + " " + side.toString() + " 0 0 1 ";
        localInt = x + side*Math.cos(theta + thetaStep);
        localString += localInt.toString() + " ";
        localInt = y + side*Math.sin(theta + thetaStep);
        localString += localInt.toString();
        currentSVG += localString;
    }
    if(localCommand == 0346){
        //arc, reverse direction (CCW)
        ctx.arc(x, y, side, theta + thetaStep,theta - thetaStep,true);
        ctx.stroke();   

        localString = "";
        localString += "M";
        var localInt = x + side*Math.cos(theta - thetaStep);
        localString += localInt.toString();
        localString += " ";
        localInt = y + side*Math.sin(theta - thetaStep);
        localString += localInt.toString();
        currentSVG += localString;
        localString = "           A" + side.toString() + " " + side.toString() + " 0 0 1 ";
        localInt = x + side*Math.cos(theta + thetaStep);
        localString += localInt.toString() + " ";
        localInt = y + side*Math.sin(theta + thetaStep);
        localString += localInt.toString();
        currentSVG += localString;
    }
    if(localCommand == 0347){
        //filled circle
        ctx.beginPath();
        ctx.arc(x, y, side, 0, 2 * Math.PI);
        ctx.closePath();
        ctx.stroke();
        ctx.fill();
        currentSVG += "    <circle cx=\"";
        currentSVG += Math.round(x).toString();
        currentSVG += "\" cy = \"";
        currentSVG += Math.round(y).toString();
        currentSVG += "\" r = \"" + side.toString() + "\" stroke = \"" + currentStroke + "\" stroke-width = \"" + (ctx.lineWidth).toString() + "\" ";
        currentSVG += "fill = \"" + currentFill + "\" />\n";		
    }
    if(localCommand == 0350){
        thetaStep /= 2;  //angle/2
    }
    if(localCommand == 0351){
        thetaStep *= 2;  //2angle
    }
    if(localCommand == 0352){
        thetaStep /= 3; //angle/3  (not possible with pure classical construction, but so what?)
    }
    if(localCommand == 0353){
        thetaStep *= 3; //3angle
    }
    if(localCommand == 0354){
         //end a closed but not filled path
        ctx.closePath();
        ctx.stroke();		
        currentSVG += "Z\""+ " stroke = \"" + currentStroke + "\" stroke-width = \"" + (ctx.lineWidth).toString() + "\" fill = \"" + "none" + "\" "+"/>";
    }
    if(localCommand == 0360){  
        //first part of bezier in middle of a path
        ctx.moveTo(Math.round(x),Math.round(y));
        cpx1 = Math.round(x + side*Math.cos(theta));
        cpy1 = Math.round(y + side*Math.sin(theta));
        currentSVG += " M";
        currentSVG += (Math.round(x)).toString() + ",";
        currentSVG += (Math.round(y)).toString() + " C";
        currentSVG += cpx1.toString() + "," + cpy1.toString() + " ";
    }
    if(localCommand == 0361){
        //second part of bezier in middle of a path
        x2 = Math.round(x);
        y2 = Math.round(y);
        cpx2 = Math.round(x + side*Math.cos(theta));
        cpy2 = Math.round(y + side*Math.sin(theta));
        ctx.bezierCurveTo(cpx1,cpy1,cpx2,cpy2,x2,y2);
        ctx.stroke();
        currentSVG += cpx2.toString() + "," + cpy2.toString() + " ";
        currentSVG += x2.toString() + "," + y2.toString() + " ";		
    }
    if(localCommand == 0362){
        //start a path
        ctx.beginPath();
        ctx.moveTo(x,y);
        currentSVG += "	<path d = \"M";
        currentSVG += Math.round(x).toString() + " ";
        currentSVG += Math.round(y).toString() + " ";
    }
    if(localCommand == 0363){
        //terminate a closed path with fill
        ctx.closePath();
        ctx.stroke();		
        ctx.fill();		
        currentSVG += "Z\""+ " stroke = \"" + currentStroke + "\" stroke-width = \"" + (ctx.lineWidth).toString() + "\" fill = \"" + currentFill + "\" "+"/>";
    }
    if(localCommand == 0364){
        //end path that is not closed and also not filled
        ctx.closePath();
        currentSVG += "\""+ " stroke = \"" + currentStroke + "\" stroke-width = \"" + (ctx.lineWidth).toString() + "\" fill = \"" + "none" + "\" "+"/>";
    }
    if(localCommand == 0365){
        //create a text field and dump the word stack into it, then clear the word stack to empty
        //(ASCII actions in the range from 040 to 0176 can, depenting on context, add to stack or map to other atcions in Table)
        ctx.font=side.toString(8) + "px " + myFont;
        ctx.fillText(currentWord,x,y);
        currentSVG += "    <text x=\"";
        currentSVG += Math.round(x).toString();
        currentSVG += "\" y = \"";
        currentSVG += Math.round(y).toString();
        currentSVG += "\" fill = \"" + currentStroke + "\""; 
        currentSVG += " font-size = \"";
        currentSVG += side + "px\"";
        currentSVG += " font-family = \"arial\"";
        currentSVG += ">";
        if(currentWord == "&"){
            currentWord = "&amp;";
        }
        if(currentWord == "<"){
            currentWord = "&lt;";
        }
        if(currentWord == ">"){
            currentWord = "&gt;";
        }
        currentSVG += currentWord;
        currentSVG += "</text>\n";	
        currentWord = "";
        currentHTML = "";
    }
    if(localCommand == 0366){
        // start a self-contained cubic Bezier path
        ctx.beginPath();
        ctx.moveTo(Math.round(x),Math.round(y));
        cpx1 = Math.round(x + side*Math.cos(theta));
        cpy1 = Math.round(y + side*Math.sin(theta));
        currentSVG += "<path    d = \"M";
        currentSVG += (Math.round(x)).toString() + ",";
        currentSVG += (Math.round(y)).toString() + " C";
        currentSVG += cpx1.toString() + "," + cpy1.toString() + " ";
    }
    if(localCommand == 0367){
        // finish a self-contained cubic Bezier path
        x2 = Math.round(x);
        y2 = Math.round(y);
        cpx2 = Math.round(x + side*Math.cos(theta));
        cpy2 = Math.round(y + side*Math.sin(theta));
        ctx.bezierCurveTo(cpx1,cpy1,cpx2,cpy2,x2,y2);
        ctx.stroke();
        currentSVG += cpx2.toString() + "," + cpy2.toString() + " ";
        currentSVG += x2.toString() + "," + y2.toString() + "\" fill = \"none\" stroke-width = \"" + (ctx.lineWidth).toString() + "\" stroke = \"" + currentStroke + "\" />";		
    }
    
 
    if(localCommand == 06){ //<page06>
    fullCube = false;
    currentTable = []; 
    for(var index = 0;index < 01777;index ++){
        currentTable.push("");
    }
    var inputbytecode = document.getElementById("bytecodeScript").text;
    var bytecodearray = inputbytecode.split("\n");
    for(var index = 0;index < bytecodearray.length;index++){
        if(bytecodearray[index].includes(":")){
            var localBytecode = bytecodearray[index].split(":");
            var localAddress = parseInt(localBytecode[0],8);
            currentTable[localAddress] = localBytecode[1];
        }
    }
    currentTableStart = [];
    for(var index = 0;index < currentTable.length;index++){
        currentTableStart.push(currentTable[index]);
    }
    //</page06>
    }
    if(localCommand == 07){//<page07>
    //intialize
    worldLine = [];
    addressStack = [];
    worldIndex = 0;
    myFont = "Arial";
    boxFontSize = 0.2;
    viewStep = 50;
    currentURL = "";
    currentWord = "";
    currentSVG = "";
    currentHTML = "";
    currentStyle = "";
    latex = true;
    currentAddress = 0260;
    currentDeck = 0400;
    currentGlyph = "0300,";
    resetColor = "#000000";
    currentStroke = "black";
    currentFill = "black";
    currentLineWidth = 2;
    currentAction = 0;
    currentCommand = "0300";
    phi = 0.5*(Math.sqrt(5) + 1);
    scaleFactor = 2;
    thetaStep = Math.PI/2;
    theta0 = -Math.PI/2; 
    theta = theta0;
    x0 = innerWidth/2;
    y0 = innerHeight/2;
    x = x0;
    y = y0;
    unit = 300;
    side = unit;
    x0 = innerWidth/2;
    y0 = innerHeight/2;
    unit = x0/8;//16 wm span total screen size
    side = unit;
    currentGlyph = "0300,0330,0341,0333,0207,0336,0341,";
    viewGlyph = "";
    x0 = 5;
    y0 = 55;
    unit = 50;
    side = unit;
    keyMode = "none";
    editMode = true;
    pageIndex = 0;

    styleJSON = {};
    styleJSON.color0 = "black";
    styleJSON.line0 = 6;    	
    styleJSON.fill0 = "black";


    //</page07>
    }
    //root magic here

    if(localCommand == 010){//delete
        var bottomGlyph = currentGlyph.split("0207")[0];   
        var topGlyph = currentGlyph.split("0207")[1]; 
        glyphSplit = bottomGlyph.split(",");
        currentGlyph = "";
        for(var index = 0;index < glyphSplit.length - 2;index++){
            if(glyphSplit[index].length > 0){
                currentGlyph += glyphSplit[index] + ",";
            }
        }
        currentGlyph += "0207,";
        currentGlyph += topGlyph;
        glyphSplit = currentGlyph.split(",");
        currentGlyph = "";
        for(var index = 0;index < glyphSplit.length;index++){
            if(glyphSplit[index].length > 0){
                currentGlyph += glyphSplit[index] + ",";
            }
        }
    }    
    if(localCommand == 020){//cursor back
        var bottomGlyph = currentGlyph.split("0207")[0];   
        var topGlyph = currentGlyph.split("0207")[1]; 
        glyphSplit = bottomGlyph.split(",");
        if(bottomGlyph.length == 0){
            currentGlyph = topGlyph + "0207,";
        }
        else{
            currentGlyph = "";
            for(var index = 0;index < glyphSplit.length - 2;index++){
                if(glyphSplit[index].length > 0){
                    currentGlyph += glyphSplit[index] + ",";
                }
            }
            currentGlyph += "0207,";
            currentGlyph += glyphSplit[glyphSplit.length - 2];
            currentGlyph += topGlyph;
        }
        glyphSplit = currentGlyph.split(",");
        currentGlyph = "";
        for(var index = 0;index < glyphSplit.length;index++){
            if(glyphSplit[index].length > 0){
                currentGlyph += glyphSplit[index] + ",";
            }
        }
    }
    if(localCommand == 021){//cursor fwd

        var bottomGlyph = currentGlyph.split("0207")[0];   
        var topGlyph = currentGlyph.split("0207")[1]; 
        if(topGlyph == ","){
            currentGlyph = "0207," + bottomGlyph;
        }
        else{
            glyphSplit = topGlyph.split(",");
            currentGlyph = bottomGlyph + ",";
            currentGlyph += glyphSplit[1] + ",";
            currentGlyph += "0207,";
            for(var index = 2;index < glyphSplit.length - 1;index++){
                if(glyphSplit[index].length > 0){
                    currentGlyph += glyphSplit[index] + ",";
                }
            }
        }
        glyphSplit = currentGlyph.split(",");
        currentGlyph = "";
        for(var index = 0;index < glyphSplit.length;index++){
            if(glyphSplit[index].length > 0){
                currentGlyph += glyphSplit[index] + ",";
            }
        }

    }

    if(localCommand == 030){
//<page030>
        y0 -= viewStep; 
        redraw();
//</page030>
    }
    if(localCommand == 031){
//<page031>
        y0 += viewStep; 
        redraw();
//</page031>
    }
    if(localCommand == 032){
//<page032>
        x0 -= viewStep; 
        redraw();
//</page032>
    }
    if(localCommand == 033){
//<page033>
        x0 += viewStep; 
        redraw();
//</page033>
    }

    if(localCommand == 036){
//<page036>
        unit /= 1.1; 
        x0 = 0.5*innerWidth + (x0 - 0.5*innerWidth)/1.1;
        y0 = 0.5*innerHeight + (y0 - 0.5*innerHeight)/1.1;
        redraw();
//</page036>
    }
    if(localCommand == 037){
//<page037>
        unit *= 1.1; 
        x0 = 0.5*innerWidth + 1.1*(x0 - 0.5*innerWidth);
        y0 = 0.5*innerHeight + 1.1*(y0 - 0.5*innerHeight);
        redraw();
//</page037>
    }
    
}
</script>
<table id = "linktable">
    <tr><td>
        <a href = "../deck/index.php?path=map/flowchart/">back to map flow deck</a>
    </td></tr>
    <tr><td>
        <a href = "../">svg output feed</a>
    </td></tr>
    <tr>
        <td class = "button">BACK</td>
    </tr>
    <tr>
        <td class = "button">FWD</td>
    </tr>
    <tr>
        <td class = "button">PUBLISH</td>
    </tr>
</table>

<div id = "container">
    <img id = "mainImage" src = ""/>
    <canvas id = "mainCanvas"></canvas>
</div>
<table id = "controlTable">
</table>
<canvas id = "spellCanvas"></canvas>
<script>

path = document.getElementById("pathdiv").innerHTML;
jsondata = JSON.parse(document.getElementById("jsondata").innerHTML);
mapIndex = 0;

doTheThing(06);
doTheThing(07);
unit = 100;
currentJSON = {};
currentJSON.unit = unit;
currentJSON.glyph = "0340,0341,";
currentGlyph = currentJSON.glyph + "0207,";
jsondata[mapIndex].glyph = currentJSON.glyph;


keyrows = [];
keyrows.push("0300,020,021,010,");
keyrows.push("0330,0331,0332,0333,");
keyrows.push("0334,0335,0336,0337,");
keyrows.push("0350,0351,0340,0342,");


if(innerWidth < innerHeight){
    keyWidth = 0.1*innerWidth;
}
else{
    keyWidth = 0.1*innerHeight;
}

for(var rowindex = 0;rowindex < keyrows.length;rowindex++){
    var keyarray = keyrows[rowindex].split(",");
    var newtr = document.createElement("TR");
    document.getElementById("controlTable").appendChild(newtr);
    for(var keyindex = 0;keyindex < keyarray.length;keyindex++){
        if(keyarray[keyindex].length > 1){
            var newtd = document.createElement("TD");
            newtd.style.width = (keyWidth).toString() + "px";
            newtd.style.height = (keyWidth).toString() + "px";
            newtr.appendChild(newtd);
            newtd.classList.add("button","softkey");
            var newcan = document.createElement("CANVAS");
            newcan.width = keyWidth;
            newcan.height = keyWidth;
            newtd.appendChild(newcan);
            ctx = newcan.getContext("2d");
            ctx.clearRect(0,0,keyWidth,keyWidth);
            side = keyWidth - 5;
            unit = keyWidth - 5;
            x0 = 2;
            y0 = keyWidth - 2;
            doTheThing(0300);
            newtd.id = "key" + keyarray[keyindex];
            if(parseInt(keyarray[keyindex],8) > 01000){
                doTheThing(parseInt(keyarray[keyindex],8));
            }
            else{
                doTheThing(01000 + parseInt(keyarray[keyindex],8));
            }

            newtd.onclick = function(){
                var localkey = this.id.substring(3);
                var localaction = parseInt(localkey,8);
                if( (localaction >= 040 && localaction < 0400) ||  (localaction > 01000 && localaction < 02000)){
                    var glyphSplit = currentGlyph.split(",");
                    currentGlyph = "";
                    for(var index = 0;index < glyphSplit.length;index++){
                        if(glyphSplit[index].length > 0 && glyphSplit[index] != "0207"){
                            currentGlyph += glyphSplit[index] + ",";
                        }
                        if(glyphSplit[index] == "0207"){
                            currentGlyph += localkey + ",0207,";
                        }
                    }
                    var glyphSplit = currentGlyph.split(",");
                    currentGlyph = "";
                    for(var index = 0;index < glyphSplit.length;index++){
                        if(glyphSplit[index].length > 0  && parseInt(glyphSplit[index]) >= 040){
                            currentGlyph += glyphSplit[index] + ",";
                        }
                    }
                    redraw();
                }
                if(localaction < 040){
                    doTheThing(localaction);
                    redraw();
                }
                
            }


        }
    }
}


document.getElementById("mainImage").src = jsondata[mapIndex].imgurl;

fixedImageWidth = 800;
document.getElementById("mainImage").width = fixedImageWidth;

imageScaleFactor = fixedImageWidth/(jsondata[mapIndex].imgw*jsondata[mapIndex].unitpixels);
x0 = -jsondata[mapIndex].unitpixels*jsondata[mapIndex].imgleft*imageScaleFactor;
y0 = -jsondata[mapIndex].unitpixels*jsondata[mapIndex].imgtop*imageScaleFactor;
unit = jsondata[mapIndex].unitpixels*imageScaleFactor;


document.getElementById("mainImage").onload = function(){
    document.getElementById("mainCanvas").width = document.getElementById("mainImage").width;
    document.getElementById("mainCanvas").height = document.getElementById("mainImage").height;
    redraw();    
    
}

function redraw(){
    ctx = document.getElementById("mainCanvas").getContext("2d");
    ctx.clearRect(0,0,innerWidth,innerHeight);
    doTheThing(0300);
    drawGlyph(currentGlyph);
    doTheThing(0300);
    x = 10;
    y = 60;
    side = 50;
    spellGlyph(currentGlyph);
}
</script>
<style>
#container{
    position:absolute;
    left:5px;
    right:5px;
    top:5px;
    bottom:5px;
    overflow:scroll;
    z-index:-1;
}
#mainImage{
    position:absolute;
    left:0px;
    top:0px;
    z-index:-2;
}
#mainCanvas{
    position:absolute;
    left:0px;
    top:0px;
    z-index:-1;
    border:solid;
    border-color:red;
}
#controlTable{
    display:block;
    position:absolute;
    z-index:2;
    right:1em;
    top:1em;
}
#linktable{
    position:absolute;
    left:5px;
    top:5px;
    z-index:3;
}
.button{
    padding:0.5em 0.5em 0.5em 0.5em;
    cursor:pointer;
    border:solid;
    border-radius:0.5em;
}
.button:hover{
    background-color:green;
}
.button:active{
    background-color:yellow;
}


</style>